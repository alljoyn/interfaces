<node xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://www.alljoyn.org/schemas/introspect.xsd">
        <!--The Application interface is provided by all security v2 applications
            and provides the basic interface of security v2 applications regardless
            of the state they are in.
        -->
        <interface name="org.alljoyn.Bus.Security.Application">
        <annotation name="org.alljoyn.Bus.Secure" value="on"/>

        <!-- A struct providing the details of an Elliptic Curve public key.-->
        <struct name="EccPublicKey">
            <!-- An enumeration describing the key type. Values:
                   0: ECDSA with SHA256
            -->
            <field name="algorithm" type="y"/>
            <!-- An enumeration identifying the curve this key is using. Values:
                   0: NIST P-256
            -->
            <field name="curveIdentifier" type="y"/>
            <!-- The X coordinate of the public key.-->
            <field name="xCoordinate" type="ay"/>
            <!-- The Y coordinate of the public key.-->
            <field name="yCoordinate" type="ay"/>
        </struct>

        <struct name="Certificate">
            <!-- An enumeration representing the encoding of the
                certificate data. Values:
                  0: an X.509 DER encoded certificate.
                  1: an X.509 PEM encoded certificate.
            -->
            <field name="encoding" type="y"/>
            <field name="certificateData" type="ay"/>
        </struct>

        <!-- A struct describing a member of an interface
             and the access rights on it.
        -->
        <struct name="Member">
            <!-- The name of the interface member. The '*' matches
                all members of the type specified by the type field.
            -->
            <field name="name" type="s"/>
            <!-- An Enumeration describing the type of the member. Values:
                  0: Any type.
                  1: Method.
                  2: Signal
                  3: Property
            -->
            <field name="type" type="y"/>
            <!-- A bitmask describing the action on the member. Values:
                  0x1: Denied. Access on this member is explicitly denied
                  0x2: Provide. Allows sending signals and/or exposing
                       methods and properties.
                  0x4: Observe. Allows receiving signals and reading properties.
                  0x8: Modify. Allows setting properties and making method
                       calls.
            -->
            <field name="action" type="y"/>
        </struct>

        <!-- A struct describing a digest value including the digest algorithm. -->
        <struct name="Digest">
            <!-- An enumeration discribing the algorithm used to calculate the
                 digest value. Values:
                   1: SHA-256
            -->
            <field name="algorithm" type="y"/>
            <!-- The actual digest. -->
            <field name="digestData" type="ay"/>
        </struct>

        <struct name="Rule">
            <!-- contains the object path on which the rule applies.
                An empty object path is allowed. In that case the rules apply
                on all matching interfaces.
            -->
            <field name="objectPath" type="s"/>
            <!-- contains the interface name on which the rule applies.
                An empty interfaceName is allowed, if the objectPath is set.
                The '*' character is allowed at the end of the interface name.
                The interface name is then considered a prefix. The rule
                applies to all interfaces names starting with the prefix.
            -->
            <field name="interfaceName" type="s"/>
            <field name="members" type="a[Member]"/>
        </struct>

        <!-- The Interface version.-->
        <property name="Version" access="read" type="q"/>

        <!-- An enumeration representing the current state of the application.
            Values:
              0: Not claimable.  The application is not claimed and not
                 accepting claim request.
              1: Claimable. The application is not claimed, but is
                 accepting claim request.
              2: Claimed. The application is claimed and can be configured.
              3: NeedsUpdate. The application is claimed, but requires a
                 configuration update (after a software upgrade)
        -->
        <property name="ApplicationState" access="read" type="q">
        </property>

        <!--  The SHA256 digest of the manifest template. This property is
            not evented as we assume nobody will keep a session alive to
            receive change events on this property.
        -->
        <property name="ManifestTemplateDigest" access="read" type="[Digest]"/>

        <!-- The public key used by this application to identify itself.-->
        <property name="PublicKey" access="read" type="[EccPublicKey]"/>

        <!-- A property containing the manufacturer certificate chain. Such
            certificates are (when available) intalled by the manufacturor at
            production time.
            The value is an array of certificates. The certificate form up a
            chain with the first element being the certificate of the application
            followed by the certificate if issuer... If no maunfacturer
            certificate is available, then an empty array should be returned.
            -->
        <propertry name="ManufacturerCertificate" access="read" type="a[Certificate]"/>

        <!-- A property containing the permissions expressed as rules this
            application requires to operate.
        -->
        <property name="ManifestTemplate" access="read" type="a[Rule]"/>

        <!-- The claimCapabilities property describes the claim schemes this
            application supports. The capabilities are expressed via a bit mask.
            Values:
              0x01: claiming via ECDHE_NULL supported.
              0x02: claiming via ECDHE_PSK with security manager generated
                    passphrase supported.
              0x04: claiming via ECDHE_PSK with application generated
                    passphrase supported.
              0x08: claiming via ECDHE_ECDSA. Both security manager and
                    claimable application share root of trust. The DSA session
                    is authenticated via this preshared root of trust.
        -->
        <property name="claimCapabilities" access="read" type="u"/>
    </interface>
</node>

