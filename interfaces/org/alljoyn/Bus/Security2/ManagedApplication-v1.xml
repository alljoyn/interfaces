<node xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://www.alljoyn.org/schemas/introspect.xsd">
    <interface name="org.alljoyn.Bus.Security2.ManagedApplication">
        <annotation name="org.alljoyn.Bus.Secure" value="on"/>
        <description>Allows the SecurityManager to update the application's
            security configuration.
        </description>

        <struct name="PublicKey">
            <description>A struct providing the details of an Elliptic Curve
                public key.</description>
            <field name="algorithm" type="y">
                <description>
                    An enumeration describing the key type:
                      0: ECDSA with SHA256
                </description>
            </field>
            <field name="curveIdentifier" type="y">
                <description>
                    An Enumeration identifying the curve this key is using.
                      0: NIST P-256
                </description>
            </field>
            <field name="xCoordinate" type="ay">
                <description>The X coordinate of the public key.</description>
            </field>
            <field name="yCoordinate" type="ay">
                <description>The Y coordinate of the public key.</description>
            </field>
        </struct>

        <struct name="Guid">
            <field name="guidData" type="ay">
                <description>The Guid represented as a byte array.
                    TODO: How are these bytes ordered?</description>
            </field>
        </struct>

        <struct name="SecurityGroup">
            <field name="guid" type="[Guid]">
                <description>The guid for the this security group.</description>
            </field>
            <field name="groupAuthority" type="[PublicKey]">
                <description>The certificate authority managing the certificates
                    of this security group.
                </description>
            </field>
        </struct>

        <struct name="Certificate">
            <field name="encoding" type="q">
                <description>An enumeration representing the encoding of the
                    certificate data. Values:
                      0: a X.509 DER encoded certificate.
                      1: a X.509 PEM encoded certificate.
                </description>
            </field>
            <field name="certificateData" type="ay"/>
        </struct>

        <struct name="Member">
            <description>A struct describing a member of an interface and the
                access rights on it.</description>
            <field name="name" type="s">
                <description>The name of the interface member. The '*' matches
                    all members of type.
                </description>
            </field>
            <field name="type" type="y">
                <description>
                    An Enumeration describing the type of the member. Values:
                      0: Any type.
                      1: Method.
                      2: Signal
                      3: property
                </description>
            </field>
            <field name="action" type="y">
                <description>
                    An bitmask describing the action on the member. Values:
                      0x1: Denied. Access on this member is explicit denied
                      0x2: Provide. Allows sending signals and/or exposing
                           methods and properties.
                      0x4: Observe: Allows receiving signals and read properties.
                      0x8: Modify: allows to set properties and to make method
                           calls.
                </description>
            </field>
        </struct>

        <struct name="Rule">
            <field name="objectPath" type="s">
                <description>contains the object path on which the rule applies.
                    An empty object path is allowed. In that case the rules apply
                    on all matching interfaces.
                </description>
            </field>
            <field name="interfaceName" type="s">
                <description>contains the interface name on which the rule applies.
                    An empty interfaceName is allowed, if the objectPath is set.
                    The '*' character is allowed at the end of the interface name.
                    The interface name is then considered a prefix. The rule
                    applies to all interfaces names starting with the prefix.
                </description>
            </field>
            <field name="members" type="a[Member]"/>
        </struct>

        <struct name="Peer">
            <field name="type" type="q">
                <description>A enumeration describing the type of peer. Values:
                    0: Anonymous: matches all peers.
                    1: Any: matches all peers trusted by the application.
                    2: Restricted: Matches all peers with certificates of a
                       the specified certificate authority.
                    3: Public key: a single peer identified by a public key.
                    4: Security group: all members of specific security group.
                </description>
            </field>
            <field name="publicKey" type="a[PublicKey]">
                <description>zero or one key depending on the peer type.
                    Anonymous: no key required.
                    Any:: No key required
                    Restricted: The public key of certificate authority.
                    Public key: the public key of the peer.
                    Security group: the public key of the security group authority.
                </description>
            </field>
            <field name="groupID" type="[Guid]">
                <description>only need for the security group type. Ignored for the other types.
                </description>
            </field>
        </struct>

        <struct name="ACL">
            <field name="peers" type="a[Peer]"/>
            <field name="rules" type="a[Rule]"/>
        </struct>

        <struct name="Policy">
            <field name="specificationVersion" type="q"/>
            <field name="version" type="u"/>
            <field name="ACLs" type="a[ACL]"/>
        </struct>

        <property name="Version" access="read" type="q">
            <description>The Interface version.</description>
        </property>

        <method name="Reset">
            <description>Resets the managed application. All configuration is
                discarded. The application is no longer claimed.
            </description>
        </method>

        <method name="UpdateIdentity">
            <arg name="certificateChain" type="a[Certificate]" direction="in">
                <description>A certificate chain. The first element is the
                    identity certificate of this application. Followed by
                    certificate of its issuer...
                </description>
            </arg>
            <arg name="permissions" type="a[Rule]" direction="in">
                <description>The permission this application can use. These
                    permissions should match the manifest of the application.
                </description>
            </arg>
        </method>

        <method name="GetIdentity">
            <arg name="certificateChain" type="a[Certificate]" direction="out">
                <description>A certificate chain. The first element is the
                    identity certificate of this application. Followed by
                    certificate of its issuer...
                </description>
            </arg>
                        </method>
        <!-- TODO: Should we merge this with GetIdentity? -->
        <method name="GetInstalledPermissions">
            <arg name="installedPermissions" type="a[Rule]" direction="out"/>
        </method>

        <method name="GetIdentityCertificateSerialNumber">
            <description>A utility method to quickly check which identity
                certificate is currently installed, without requiring to retreive
                the certificate.
            </description>
            <arg name="serialNumber" type="ay" direction="out"/>
            <arg name="issuer" type="[PublicKey]" direction="out"/>
        </method>

        <property name="PolicyVersion" access="read" type="u">
            <description>A property providing the version number of the currently
                installed policy. This property is not evented.
            </description>
        </property>
         <method name="UpdatePolicy">
            <arg name="policy" type="[Policy]" direction="in"/>
        </method>
        <method name="GetPolicy">
            <arg name="policy" type="[Policy]" direction="out"/>
        </method>

        <method name="GetDefaultPolicy">
            <description>Retrieve the default policy for this application,
                regardless of the currently installed policy.
            </description>
            <arg name="policy" type="[Policy]" direction="out"/>
        </method>

        <method name="ResetPolicy">
            <description>Reset the policy to default policy generated during
                the claiming process.
            </description>
        </method>

        <method name="InstallMembership">
            <arg name="certificateChain" type="a[Certificate]" direction="in">
                <description>A certificate chain. The first element is the
                    identity certificate of this application. Followed by
                    certificate of its issuer...
                </description>
            </arg>
        </method>
        <method name="RemoveMembership">
            <arg name="serialNum" type="ay" direction="in"/>
            <arg name="issuer" type="[PublicKey]" direction="in"/>
        </method>
        <method name="GetMembershipSummaries">
            <description>A utility method to retrieve the list of serial numbers
                and issuers of the currently install membership certificates.
            </description>
            <arg name="certificateSummaries" type="a[SecurityGroup]" direction="out"/>
        </method>
    </interface>
</node>

