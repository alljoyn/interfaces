<node xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://www.alljoyn.org/schemas/introspect.xsd">
        <!-- Once an application is claimed it becomes manageable.
            The ManagedApplication interface describes the API for the
            SecurityManager to update the application's security configuration.
        -->
        <interface name="org.alljoyn.Bus.Security.ManagedApplication">
        <annotation name="org.alljoyn.Bus.Secure" value="true"/>

        <!-- A struct providing the details of an Elliptic Curve Cryptography
            public key.
        -->
        <struct name="EccPublicKey">
            <!-- An enumeration describing the key type. Values:
                   0: ECDSA with SHA256
            -->
            <field name="algorithm" type="y"/>
            <!-- An enumeration identifying the curve this key is using. Values:
                   0: NIST P-256
            -->
            <field name="curveIdentifier" type="y"/>
            <!-- The X coordinate of the public key.-->
            <field name="xCoordinate" type="ay"/>
            <!-- The Y coordinate of the public key.-->
            <field name="yCoordinate" type="ay"/>
        </struct>

        <struct name="Guid">
            <!-- The GUID represented as a byte array. -->
            <field name="guidData" type="ay"/>
        </struct>

        <struct name="Certificate">
            <!-- An enumeration representing the encoding of the
                certificate data. Values:
                  0: an X.509 DER encoded certificate.
                  1: an X.509 PEM encoded certificate.
            -->
            <field name="encoding" type="y"/>
            <field name="certificateData" type="ay"/>
        </struct>

        <!-- A struct containing the identity parameters of a certificate -->
        <struct name="CertificateId">
            <!-- The serial number of the certificate. -->
            <field name="serialNumber" type="ay"/>
            <!-- The public key of the issuer of the certificate. -->
            <field name="issuer" type="[EccPublicKey]"/>
        </struct>

        <!-- A struct describing a member of an interface
             and the access rights on it.
        -->
        <struct name="Member">
            <!-- The name of the interface member. The '*' matches
                all members of the type specified by the type field.
            -->
            <field name="name" type="s"/>
            <!-- An enumeration describing the type of the member. Values:
                  0: Any type.
                  1: Method.
                  2: Signal.
                  3: Property.
            -->
            <field name="type" type="y"/>
            <!-- A bitmask describing the action on the member. Values:
                  0x1: Provide. Allows sending signals and/or exposing
                       methods and properties.
                  0x2: Observe. Allows receiving signals and reading properties.
                  0x4: Modify. Allows setting properties and making method
                       calls.
                Note: A rule with none of the bits set (no rights are granted),
                  is considered as an explicit deny rule.
            -->
            <field name="action" type="y"/>
        </struct>

        <struct name="Rule">
            <!-- contains the object path on which the rule applies.
                An empty object path is allowed. In that case the rules apply
                on all matching interfaces.
            -->
            <field name="objectPath" type="s"/>
            <!-- contains the interface name on which the rule applies.
                An empty interfaceName is allowed, if the objectPath is set.
                The '*' character is allowed at the end of the interface name.
                The interface name is then considered a prefix. The rule
                applies to all interfaces names starting with the prefix.
            -->
            <field name="interfaceName" type="s"/>
            <field name="members" type="a[Member]"/>
        </struct>

        <struct name="Peer">
            <!-- An enumeration describing the type of peer. Values:
                  0: Anonymous: matches all peers.
                  1: Any: matches all peers trusted by the application.
                  2: Restricted: Matches all peers with certificates of a
                     the specified certificate authority.
                  3: Public key: a single peer identified by a public key.
                  4: Security group: all members of specific security group.
            -->
            <field name="type" type="q"/>
            <!-- zero or one key depending on the peer type.
                  Anonymous: No key required.
                  Any: No key required.
                  Restricted: The public key of certificate authority.
                  Public key: The public key of the peer.
                  Security group: The public key of the security group authority.
            -->
            <field name="publicKey" type="a[EccPublicKey]"/>
            <!-- only need for the security group type. Ignored for the other types. -->
            <field name="groupId" type="[Guid]"/>
        </struct>

        <struct name="Acl">
            <field name="peers" type="a[Peer]"/>
            <field name="rules" type="a[Rule]"/>
        </struct>

        <struct name="Policy">
            <field name="specificationVersion" type="q"/>
            <field name="version" type="u"/>
            <field name="acls" type="a[Acl]"/>
        </struct>

        <!-- The Interface version.-->
        <property name="Version" access="read" type="q"/>

        <!-- Resets the managed application. All configuration is
            discarded. The application is no longer claimed.
        -->
        <method name="Reset"/>

        <method name="UpdateIdentity">
            <!-- A certificate chain. The first element is the
                identity certificate of this application. Followed by
                certificate of its issuer...
            -->
            <arg name="certificateChain" type="a(yay)" direction="in"/> <!-- type="a[Certificate]" -->
            <!-- The permission this application can use. These
                permissions should match the manifest template of the application.
            -->
            <arg name="manifest" type="a(ssa(syy))" direction="in"/> <!-- type="a[Rule]" -->
        </method>

        <!-- A property holding the identity certificate chain. The first element
            is the identity certificate of this application. Followed by
            certificate of its issuer...
        -->
        <property name="Identity" access="read" type="a(yay)"> <!-- type="a[Certificate]" -->
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <property name="Manifest" access="read" type="a(ssa(syy))"> <!-- type="a[Rule]" -->
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <!-- A property containing the serialnumber and issuer of the identity
            certificate currently installed.
        -->
        <property name="IdentityCertificateId" access="read" type="ayyyayay">  <!-- type="[CertificateId]" -->
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <!-- A property providing the version number of the currently
            installed policy. This property is not evented.
        -->
        <property name="PolicyVersion" access="read" type="u">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <method name="UpdatePolicy">
           <arg name="policy" type="qua(a(ya(yyayay)ay)a(ssa(syy)))" direction="in"/>  <!-- type="[Policy]" -->
        </method>

        <property name="Policy" access="read" type="qua(a(ya(yyayay)ay)a(ssa(syy)))"> <!-- type="[Policy]" -->
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <!-- The default policy for this application,
            regardless of the currently installed policy.
        -->
        <property name="DefaultPolicy" access="read" type="qua(a(ya(yyayay)ay)a(ssa(syy)))"> <!-- type="[Policy]" -->
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <!-- Reset the policy to default policy generated during
            the claiming process.
        -->
        <method name="ResetPolicy"/>

        <method name="InstallMembership">
            <!-- A certificate chain. The first element is the
                identity certificate of this application. Followed by
                certificate of its issuer...
            -->
            <arg name="certificateChain" type="a(yay)" direction="in"/> <!-- type="a[Certificate]" -->
        </method>

        <method name="RemoveMembership">
            <arg name="certificateId" type="ayyyayay" direction="in"/> <!-- type="[CertificateId]" -->
        </method>

        <!-- A property containing the list of serial numbers
            and issuers of the currently install membership certificates.
        -->
        <property name="MembershipSummaries" access="read" type="a(ayyyayay)"> <!-- type="a[CertificateId]" -->
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>
    </interface>
</node>

